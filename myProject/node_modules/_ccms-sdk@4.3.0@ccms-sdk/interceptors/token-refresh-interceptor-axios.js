'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.setAuthFailedBehavior = setAuthFailedBehavior;
exports.setRefreshTokenUrl = setRefreshTokenUrl;

var _credentials = require('../credentials');

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _metadata = require('./metadata');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /**
                                                                                                                                                                                                                   * @author JOCS
                                                                                                                                                                                                                   */


var needToRefreshToken = false;

var execAuthFailure = _metadata.noop;
function setAuthFailedBehavior() {
	var fn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _metadata.noop;


	execAuthFailure = function execAuthFailure(rejection) {

		try {
			fn();
		} finally {
			(0, _credentials.removeRequestCredential)();
		}

		var ex = new TypeError('Unauthorized! Credential was expired or had been removed,' + 'pls set it before the get action!');
		console.error(ex);

		rejection.status = rejection.status || 401;
		rejection.statusText = rejection.statusText || 'Unauthorized!';
		return Promise.reject(rejection);
	};
}

var refreshTokenUrl = '';
function setRefreshTokenUrl(url) {
	refreshTokenUrl = url;
	_metadata.REQUEST_WHITE_LIST.push(url);
}

var initInterceptor = function initInterceptor(http) {
	// 定义interceptor
	var interceptors = {
		requestErr: function requestErr(error) {
			http.requestCount++;
			return Promise.reject(error);
		},
		request: function request(config) {
			http.requestCount++;
			var credential = (0, _credentials.getRequestCredential)();

			var accessToken = _metadata.CREDENTIAL_KEY_MAPPER.accessToken,
			    refreshToken = _metadata.CREDENTIAL_KEY_MAPPER.refreshToken,
			    expireTime = _metadata.CREDENTIAL_KEY_MAPPER.expireTime;
			// storage 里的状态有可能已经失效

			if (!credential) {
				return execAuthFailure({ config: config });
			}

			config.headers[_metadata.REQUEST_TOKEN_HEADER] = (0, _metadata.REQUEST_TOKEN_VALUE)(credential[accessToken]);
			// console.log(JSON.stringify(config, null, 4));
			// console.log(credential, null, 4);
			// 白名单之外的url做校验
			// TODO 兼容处理,如果拿不到refreshToken说明系统还未升级,则不做刷新token逻辑
			if (credential[refreshToken] && _metadata.REQUEST_WHITE_LIST.indexOf(config.url) === -1) {

				// expireTime type is second
				var expireDateTime = credential[expireTime] * 1000;
				var now = _metadata.Date.now();

				// token失效则直接跳转登录页面
				// token未失效但是可用时长已低于用户会话最短保留时间,则需要刷新token
				if (_metadata.USER_SESSION_AVAILABLE_TIME >= expireDateTime - now && expireDateTime - now >= 0) {
					needToRefreshToken = true;
				} else if (expireDateTime - now < 0) {
					// token失效
					console.log('expired');
					return execAuthFailure({ config: config });
				}
			}

			return config;
		},
		response: function response(_response) {

			http.requestCount--;
			// 如果请求能正常响应,说明 storage 里的状态是存在的,所以这里不做判断
			var credential = (0, _credentials.getRequestCredential)();
			var accessToken = _metadata.CREDENTIAL_KEY_MAPPER.accessToken,
			    refreshToken = _metadata.CREDENTIAL_KEY_MAPPER.refreshToken;

			// 所有请求结束了才做refreshToken的操作,避免后端因为token被刷新而导致前一请求失败

			if (needToRefreshToken && http.requestCount <= 0) {
				needToRefreshToken = false;
				// refresh token
				http.post(refreshTokenUrl, _querystring2.default.stringify({ 'refresh_token': credential[refreshToken], 'grant_type': 'refresh_token' }), {
					headers: _defineProperty({
						'Content-Type': 'application/x-www-form-urlencoded'
					}, _metadata.REQUEST_TOKEN_HEADER, (0, _metadata.REQUEST_TOKEN_VALUE)(credential[accessToken]))
				}).then(function (res) {
					console.log(JSON.stringify(res.data, null, 4));
					// 更新localStorage中token信息
					(0, _credentials.setRequestCredential)(res.data);
				}).catch(function (rejection) {
					console.error(rejection);
					execAuthFailure(rejection);
				});
			}

			return _response;
		},
		responseErr: function responseErr(error) {
			http.requestCount--;
			return Promise.reject(error);
		}
	};

	var request = interceptors.request,
	    response = interceptors.response,
	    requestErr = interceptors.requestErr,
	    responseErr = interceptors.responseErr;


	http.requestCount = 0;

	http.interceptors.request.use(request, requestErr);
	http.interceptors.response.use(response, responseErr);
};

exports.default = initInterceptor;
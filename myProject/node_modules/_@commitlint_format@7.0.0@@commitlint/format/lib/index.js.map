{"version":3,"sources":["../src/index.js"],"names":["format","DEFAULT_SIGNS","DEFAULT_COLORS","report","options","signs","colors","color","enabled","errors","warnings","problems","map","problem","sign","level","decoration","name","grey","message","selectSign","selectColor","summary","length","bold"],"mappings":";;;;;kBAKwBA,M;;AALxB;;;;;;AAEA,MAAMC,gBAAgB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAtB;AACA,MAAMC,iBAAiB,CAAC,OAAD,EAAU,QAAV,EAAoB,KAApB,CAAvB;;AAEe,SAASF,MAAT,CAAgBG,SAAS,EAAzB,EAA6BC,UAAU,EAAvC,EAA2C;AAAA,sBAKrDA,OALqD,CAExDC,KAFwD;AAAA,OAExDA,KAFwD,kCAEhDJ,aAFgD;AAAA,uBAKrDG,OALqD,CAGxDE,MAHwD;AAAA,OAGxDA,MAHwD,mCAG/CJ,cAH+C;AAAA,sBAKrDE,OALqD,CAIxDG,KAJwD;AAAA,OAIjDC,OAJiD,kCAIvC,IAJuC;AAAA,sBAMpBL,MANoB,CAMlDM,MANkD;AAAA,OAMlDA,MANkD,kCAMzC,EANyC;AAAA,wBAMpBN,MANoB,CAMrCO,QANqC;AAAA,OAMrCA,QANqC,oCAM1B,EAN0B;;;AAQzD,OAAMC,WAAW,CAAC,GAAGF,MAAJ,EAAY,GAAGC,QAAf,EAAyBE,GAAzB,CAA6BC,WAAW;AACxD,QAAMC,OAAOT,MAAMQ,QAAQE,KAAd,KAAwB,EAArC;AACA,QAAMR,QAAQD,OAAOO,QAAQE,KAAf,KAAyB,OAAvC;AACA,QAAMC,aAAaR,UAAU,gBAAMD,KAAN,EAAaO,IAAb,CAAV,GAA+BA,IAAlD;AACA,QAAMG,OAAOT,UACV,gBAAMU,IAAN,CAAY,IAAGL,QAAQI,IAAK,GAA5B,CADU,GAET,IAAGJ,QAAQI,IAAK,GAFpB;AAGA,SAAQ,GAAED,UAAW,MAAKH,QAAQM,OAAQ,IAAGF,IAAK,EAAlD;AACA,EARgB,CAAjB;;AAUA,OAAMH,OAAOM,WAAW,EAACX,MAAD,EAASC,QAAT,EAAX,CAAb;AACA,OAAMH,QAAQc,YAAY,EAACZ,MAAD,EAASC,QAAT,EAAZ,CAAd;;AAEA,OAAMM,aAAaR,UAAU,gBAAMD,KAAN,EAAaO,IAAb,CAAV,GAA+BA,IAAlD;AACA,OAAMQ,UAAW,GAAEN,UAAW,YAAWP,OAAOc,MAAO,cACtDb,SAASa,MACT,WAFD;AAGA,QAAO,CAAC,GAAGZ,QAAJ,EAAcH,UAAU,gBAAMgB,IAAN,CAAWF,OAAX,CAAV,GAAgCA,OAA9C,CAAP;AACA;;AAED,SAASF,UAAT,CAAoBjB,MAApB,EAA4B;AAC3B,KAAIA,OAAOM,MAAP,CAAcc,MAAd,GAAuB,CAA3B,EAA8B;AAC7B,SAAO,GAAP;AACA;AACD,QAAOpB,OAAOO,QAAP,CAAgBa,MAAhB,GAAyB,GAAzB,GAA+B,GAAtC;AACA;;AAED,SAASF,WAAT,CAAqBlB,MAArB,EAA6B;AAC5B,KAAIA,OAAOM,MAAP,CAAcc,MAAd,GAAuB,CAA3B,EAA8B;AAC7B,SAAO,KAAP;AACA;AACD,QAAOpB,OAAOO,QAAP,CAAgBa,MAAhB,GAAyB,QAAzB,GAAoC,OAA3C;AACA","file":"index.js","sourcesContent":["import chalk from 'chalk';\n\nconst DEFAULT_SIGNS = [' ', '⚠', '✖'];\nconst DEFAULT_COLORS = ['white', 'yellow', 'red'];\n\nexport default function format(report = {}, options = {}) {\n\tconst {\n\t\tsigns = DEFAULT_SIGNS,\n\t\tcolors = DEFAULT_COLORS,\n\t\tcolor: enabled = true\n\t} = options;\n\tconst {errors = [], warnings = []} = report;\n\n\tconst problems = [...errors, ...warnings].map(problem => {\n\t\tconst sign = signs[problem.level] || '';\n\t\tconst color = colors[problem.level] || 'white';\n\t\tconst decoration = enabled ? chalk[color](sign) : sign;\n\t\tconst name = enabled\n\t\t\t? chalk.grey(`[${problem.name}]`)\n\t\t\t: `[${problem.name}]`;\n\t\treturn `${decoration}   ${problem.message} ${name}`;\n\t});\n\n\tconst sign = selectSign({errors, warnings});\n\tconst color = selectColor({errors, warnings});\n\n\tconst decoration = enabled ? chalk[color](sign) : sign;\n\tconst summary = `${decoration}   found ${errors.length} problems, ${\n\t\twarnings.length\n\t} warnings`;\n\treturn [...problems, enabled ? chalk.bold(summary) : summary];\n}\n\nfunction selectSign(report) {\n\tif (report.errors.length > 0) {\n\t\treturn '✖';\n\t}\n\treturn report.warnings.length ? '⚠' : '✔';\n}\n\nfunction selectColor(report) {\n\tif (report.errors.length > 0) {\n\t\treturn 'red';\n\t}\n\treturn report.warnings.length ? 'yellow' : 'green';\n}\n"]}
{"version":3,"sources":["../src/index.js"],"names":["sander","getCommitMessages","settings","cwd","from","to","edit","getEditCommit","getHistoryCommits","options","opts","Promise","resolve","reject","data","on","chunk","push","toString","top","TypeError","editFilePath","join","readFile","editFile"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;IAAYA,M;;AAEZ;;;;;;;;kBAEeC,iB;;AAEf;AACA;;AACA,SAAeA,iBAAf,CAAiCC,QAAjC;AAAA;AAAA,QACQC,GADR,GAC+BD,QAD/B,CACQC,GADR;AAAA,QACaC,IADb,GAC+BF,QAD/B,CACaE,IADb;AAAA,QACmBC,EADnB,GAC+BH,QAD/B,CACmBG,EADnB;AAAA,QACuBC,IADvB,GAC+BJ,QAD/B,CACuBI,IADvB;;;AAGC,MAAIA,IAAJ,EAAU;AACT,kBAAOC,cAAcJ,GAAd,EAAmBG,IAAnB,CAAP;AACA;;AAED,iBAAOE,kBAAkB,EAACJ,IAAD,EAAOC,EAAP,EAAlB,EAA8B,EAACF,GAAD,EAA9B,CAAP;AAPD;AAAA;;AAUA;AACA;AACA,SAASK,iBAAT,CAA2BC,OAA3B,EAAoCC,OAAO,EAA3C,EAA+C;AAC9C,QAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,QAAMC,OAAO,EAAb;AACA,+BAAcL,OAAd,EAAuB,EAACN,KAAKO,KAAKP,GAAX,EAAvB,EACEY,EADF,CACK,MADL,EACaC,SAASF,KAAKG,IAAL,CAAUD,MAAME,QAAN,CAAe,OAAf,CAAV,CADtB,EAEEH,EAFF,CAEK,OAFL,EAEcF,MAFd,EAGEE,EAHF,CAGK,KAHL,EAGY,MAAM;AAChBH,WAAQE,IAAR;AACA,GALF;AAMA,EARM,CAAP;AASA;;AAED;AACA;AACA,SAAeP,aAAf,CAA6BJ,GAA7B,EAAkCG,IAAlC;AAAA;AAAA;AACa,yBAAM,wBAASH,GAAT,CAAN;AAAA;AAANgB,OAAM;;;AAEZ,QAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC5B,mBAAM,IAAIC,SAAJ,CAAe,gCAA+BjB,GAAI,EAAlD,CAAN;AACA;;AAEKkB,gBANM,GAOX,OAAOf,IAAP,KAAgB,QAAhB,GACG,eAAKM,OAAL,CAAaO,GAAb,EAAkBb,IAAlB,CADH,GAEG,eAAKgB,IAAL,CAAUH,GAAV,EAAe,qBAAf,CATQ;AAWK,2BAAMnB,OAAOuB,QAAP,CAAgBF,YAAhB,CAAN;AAAA;AAAXG,cAAW;;AACjB,qBAAO,CAAE,GAAEA,SAASN,QAAT,CAAkB,OAAlB,CAA2B,IAA/B,CAAP;AADiB;AAAA;AAAA;AAAA;AAXL;AAAA;AAAA;AAAA;AADb;AAAA","file":"index.js","sourcesContent":["import path from 'path';\nimport gitRawCommits from 'git-raw-commits';\nimport * as sander from '@marionebl/sander';\n\nimport toplevel from '@commitlint/top-level';\n\nexport default getCommitMessages;\n\n// Get commit messages\n// Object => Promise<Array<String>>\nasync function getCommitMessages(settings) {\n\tconst {cwd, from, to, edit} = settings;\n\n\tif (edit) {\n\t\treturn getEditCommit(cwd, edit);\n\t}\n\n\treturn getHistoryCommits({from, to}, {cwd});\n}\n\n// Get commit messages from history\n// Object => Promise<string[]>\nfunction getHistoryCommits(options, opts = {}) {\n\treturn new Promise((resolve, reject) => {\n\t\tconst data = [];\n\t\tgitRawCommits(options, {cwd: opts.cwd})\n\t\t\t.on('data', chunk => data.push(chunk.toString('utf-8')))\n\t\t\t.on('error', reject)\n\t\t\t.on('end', () => {\n\t\t\t\tresolve(data);\n\t\t\t});\n\t});\n}\n\n// Get recently edited commit message\n// (cwd: string, edit: any) => Promise<Array<String>>\nasync function getEditCommit(cwd, edit) {\n\tconst top = await toplevel(cwd);\n\n\tif (typeof top !== 'string') {\n\t\tthrow new TypeError(`Could not find git root from ${cwd}`);\n\t}\n\n\tconst editFilePath =\n\t\ttypeof edit === 'string'\n\t\t\t? path.resolve(top, edit)\n\t\t\t: path.join(top, '.git/COMMIT_EDITMSG');\n\n\tconst editFile = await sander.readFile(editFilePath);\n\treturn [`${editFile.toString('utf-8')}\\n`];\n}\n"]}
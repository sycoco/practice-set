{"version":3,"sources":["../src/cli.test.js"],"names":["sander","bin","join","__dirname","cli","args","options","input","c","capture","cwd","env","pipe","stdin","catch","err","t","bootstrap","actual","is","code","true","stdout","includes","stderr","file","writePkg","scripts","commitmsg","upper","writeFile","variable","outer","init","message","false","split","payload","pkgPath","readFile","pkg","JSON","parse","result","stringify"],"mappings":"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","file":"cli.test.js","sourcesContent":["import path from 'path';\nimport {fix, git} from '@commitlint/test';\nimport test from 'ava';\nimport execa from 'execa';\nimport merge from 'lodash.merge';\nimport * as sander from 'sander';\nimport stream from 'string-to-stream';\n\nconst bin = path.join(__dirname, './cli.js');\n\nconst cli = (args, options) => {\n\treturn (input = '') => {\n\t\tconst c = execa(bin, args, {\n\t\t\tcapture: ['stdout'],\n\t\t\tcwd: options.cwd,\n\t\t\tenv: options.env\n\t\t});\n\t\tstream(input).pipe(c.stdin);\n\t\treturn c.catch(err => err);\n\t};\n};\n\ntest('should throw when called without [input]', async t => {\n\tconst cwd = await git.bootstrap('fixtures/empty');\n\tconst actual = await cli([], {cwd})();\n\tt.is(actual.code, 1);\n});\n\ntest('should reprint input from stdin', async t => {\n\tconst cwd = await git.bootstrap('fixtures/empty');\n\tconst actual = await cli([], {cwd})('foo: bar');\n\tt.true(actual.stdout.includes('foo: bar'));\n});\n\ntest('should produce no success output with --quiet flag', async t => {\n\tconst cwd = await git.bootstrap('fixtures/empty');\n\tconst actual = await cli(['--quiet'], {cwd})('foo: bar');\n\tt.is(actual.stdout, '');\n\tt.is(actual.stderr, '');\n});\n\ntest('should produce no success output with -q flag', async t => {\n\tconst cwd = await git.bootstrap('fixtures/empty');\n\tconst actual = await cli(['-q'], {cwd})('foo: bar');\n\tt.is(actual.stdout, '');\n\tt.is(actual.stderr, '');\n});\n\ntest('should succeed for input from stdin without rules', async t => {\n\tconst cwd = await git.bootstrap('fixtures/empty');\n\tconst actual = await cli([], {cwd})('foo: bar');\n\tt.is(actual.code, 0);\n});\n\ntest('should fail for input from stdin with rule from rc', async t => {\n\tconst cwd = await git.bootstrap('fixtures/simple');\n\tconst actual = await cli([], {cwd})('foo: bar');\n\tt.true(actual.stdout.includes('type must not be one of [foo]'));\n\tt.is(actual.code, 1);\n});\n\ntest('should work with --config option', async t => {\n\tconst file = 'config/commitlint.config.js';\n\tconst cwd = await git.bootstrap('fixtures/specify-config-file');\n\tconst actual = await cli(['--config', file], {cwd})('foo: bar');\n\tt.true(actual.stdout.includes('type must not be one of [foo]'));\n\tt.is(actual.code, 1);\n});\n\ntest('should fail for input from stdin with rule from js', async t => {\n\tconst cwd = await git.bootstrap('fixtures/extends-root');\n\tconst actual = await cli(['--extends', './extended'], {cwd})('foo: bar');\n\tt.true(actual.stdout.includes('type must not be one of [foo]'));\n\tt.is(actual.code, 1);\n});\n\ntest('should produce no error output with --quiet flag', async t => {\n\tconst cwd = await git.bootstrap('fixtures/simple');\n\tconst actual = await cli(['--quiet'], {cwd})('foo: bar');\n\tt.is(actual.stdout, '');\n\tt.is(actual.stderr, '');\n\tt.is(actual.code, 1);\n});\n\ntest('should produce no error output with -q flag', async t => {\n\tconst cwd = await git.bootstrap('fixtures/simple');\n\tconst actual = await cli(['-q'], {cwd})('foo: bar');\n\tt.is(actual.stdout, '');\n\tt.is(actual.stderr, '');\n\tt.is(actual.code, 1);\n});\n\ntest('should work with husky commitmsg hook and git commit', async () => {\n\tconst cwd = await git.bootstrap('fixtures/husky/integration');\n\tawait writePkg({scripts: {commitmsg: `'${bin}' -e`}}, {cwd});\n\n\tawait execa('npm', ['install'], {cwd});\n\tawait execa('git', ['add', 'package.json'], {cwd});\n\tawait execa('git', ['commit', '-m', '\"test: this should work\"'], {cwd});\n});\n\ntest('should work with husky commitmsg hook in sub packages', async () => {\n\tconst upper = await git.bootstrap('fixtures/husky');\n\tconst cwd = path.join(upper, 'integration');\n\tawait writePkg({scripts: {commitmsg: `'${bin}' -e`}}, {cwd: upper});\n\n\tawait execa('npm', ['install'], {cwd});\n\tawait execa('git', ['add', 'package.json'], {cwd});\n\tawait execa('git', ['commit', '-m', '\"test: this should work\"'], {cwd});\n});\n\ntest('should work with husky via commitlint -e $GIT_PARAMS', async () => {\n\tconst cwd = await git.bootstrap('fixtures/husky/integration');\n\tawait writePkg({scripts: {commitmsg: `'${bin}' -e $GIT_PARAMS`}}, {cwd});\n\n\tawait execa('npm', ['install'], {cwd});\n\tawait execa('git', ['add', 'package.json'], {cwd});\n\tawait execa('git', ['commit', '-m', '\"test: this should work\"'], {cwd});\n});\n\ntest('should work with husky via commitlint -e %GIT_PARAMS%', async () => {\n\tconst cwd = await git.bootstrap('fixtures/husky/integration');\n\tawait writePkg({scripts: {commitmsg: `'${bin}' -e %GIT_PARAMS%`}}, {cwd});\n\n\tawait execa('npm', ['install'], {cwd});\n\tawait execa('git', ['add', 'package.json'], {cwd});\n\tawait execa('git', ['commit', '-m', '\"test: this should work\"'], {cwd});\n});\n\ntest('should allow reading of environment variables for edit file, succeeding if valid', async t => {\n\tconst cwd = await git.bootstrap();\n\tawait sander.writeFile(cwd, 'commit-msg-file', 'foo');\n\tconst actual = await cli(['--env', 'variable'], {\n\t\tcwd,\n\t\tenv: {variable: 'commit-msg-file'}\n\t})();\n\tt.is(actual.code, 0);\n});\n\ntest('should allow reading of environment variables for edit file, failing if invalid', async t => {\n\tconst cwd = await git.bootstrap('fixtures/simple');\n\tawait sander.writeFile(\n\t\tcwd,\n\t\t'commit-msg-file',\n\t\t'foo: bar\\n\\nFoo bar bizz buzz.\\n\\nCloses #123.'\n\t);\n\tconst actual = await cli(['--env', 'variable'], {\n\t\tcwd,\n\t\tenv: {variable: 'commit-msg-file'}\n\t})();\n\tt.is(actual.code, 1);\n});\n\ntest('should pick up parser preset and fail accordingly', async t => {\n\tconst cwd = await git.bootstrap('fixtures/parser-preset');\n\tconst actual = await cli(['--parser-preset', './parser-preset'], {cwd})(\n\t\t'type(scope): subject'\n\t);\n\tt.is(actual.code, 1);\n\tt.true(actual.stdout.includes('message may not be empty [subject-empty]'));\n});\n\ntest('should pick up parser preset and succeed accordingly', async t => {\n\tconst cwd = await git.bootstrap('fixtures/parser-preset');\n\tconst actual = await cli(['--parser-preset', './parser-preset'], {cwd})(\n\t\t'----type(scope): subject'\n\t);\n\tt.is(actual.code, 0);\n});\n\ntest('should pick up config from outside git repo and fail accordingly', async t => {\n\tconst outer = await fix.bootstrap('fixtures/outer-scope');\n\tconst cwd = await git.init(path.join(outer, 'inner-scope'));\n\n\tconst actual = await cli([], {cwd})('inner: bar');\n\tt.is(actual.code, 1);\n});\n\ntest('should pick up config from outside git repo and succeed accordingly', async t => {\n\tconst outer = await fix.bootstrap('fixtures/outer-scope');\n\tconst cwd = await git.init(path.join(outer, 'inner-scope'));\n\n\tconst actual = await cli([], {cwd})('outer: bar');\n\tt.is(actual.code, 0);\n});\n\ntest('should pick up config from inside git repo with precedence and succeed accordingly', async t => {\n\tconst outer = await fix.bootstrap('fixtures/inner-scope');\n\tconst cwd = await git.init(path.join(outer, 'inner-scope'));\n\n\tconst actual = await cli([], {cwd})('inner: bar');\n\tt.is(actual.code, 0);\n});\n\ntest('should pick up config from inside git repo with precedence and fail accordingly', async t => {\n\tconst outer = await fix.bootstrap('fixtures/inner-scope');\n\tconst cwd = await git.init(path.join(outer, 'inner-scope'));\n\n\tconst actual = await cli([], {cwd})('outer: bar');\n\tt.is(actual.code, 1);\n});\n\ntest('should handle --amend with signoff', async () => {\n\tconst cwd = await git.bootstrap('fixtures/signoff');\n\tawait writePkg({scripts: {commitmsg: `'${bin}' -e`}}, {cwd});\n\n\tawait execa('npm', ['install'], {cwd});\n\tawait execa('git', ['add', 'package.json'], {cwd});\n\tawait execa(\n\t\t'git',\n\t\t['commit', '-m', '\"test: this should work\"', '--signoff'],\n\t\t{cwd}\n\t);\n\tawait execa('git', ['commit', '--amend', '--no-edit'], {cwd});\n});\n\ntest('should handle linting with issue prefixes', async t => {\n\tconst cwd = await git.bootstrap('fixtures/issue-prefixes');\n\tconst actual = await cli([], {cwd})('foobar REF-1');\n\tt.is(actual.code, 0);\n});\n\ntest('should print full commit message when input from stdin fails', async t => {\n\tconst cwd = await git.bootstrap('fixtures/simple');\n\tconst input = 'foo: bar\\n\\nFoo bar bizz buzz.\\n\\nCloses #123.';\n\tconst actual = await cli([], {cwd})(input);\n\n\tt.true(actual.stdout.includes(input));\n\tt.is(actual.code, 1);\n});\n\ntest('should not print full commit message when input succeeds', async t => {\n\tconst cwd = await git.bootstrap('fixtures/empty');\n\tconst message = 'foo: bar\\n\\nFoo bar bizz buzz.\\n\\nCloses #123.';\n\tconst actual = await cli([], {cwd})(message);\n\n\tt.false(actual.stdout.includes(message));\n\tt.true(actual.stdout.includes(message.split('\\n')[0]));\n\tt.is(actual.code, 0);\n});\n\nasync function writePkg(payload, options) {\n\tconst pkgPath = path.join(options.cwd, 'package.json');\n\tconst pkg = JSON.parse(await sander.readFile(pkgPath));\n\tconst result = merge(pkg, payload);\n\tawait sander.writeFile(pkgPath, JSON.stringify(result, null, '  '));\n}\n"]}
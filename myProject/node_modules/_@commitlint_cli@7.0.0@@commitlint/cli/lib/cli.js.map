{"version":3,"sources":["../src/cli.js"],"names":["require","format","load","lint","read","chalk","meow","merge","pick","stdin","pkg","help","flags","color","alias","default","description","type","config","cwd","process","edit","env","extends","from","quiet","to","version","cli","name","unknown","arg","Error","main","catch","err","setTimeout","exit","options","raw","input","normalizeFlags","fromStdin","checkFromStdin","range","fmt","constructor","enabled","messages","Array","isArray","filter","message","Boolean","length","checkFromRepository","console","log","loadOpts","file","getSeed","loaded","parserOpts","selectParserOpts","parserPreset","opts","commentChar","Promise","all","map","rules","report","formatted","errors","split","grey","bold","join","error","checkFromHistory","checkFromEdit","getEditValue","e","warn","GIT_PARAMS","seed","n","i","undefined","on","reason","promise"],"mappings":"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","file":"cli.js","sourcesContent":["\nrequire('babel-polyfill'); // eslint-disable-line import/no-unassigned-import\n\nconst format = require('@commitlint/format');\nconst load = require('@commitlint/load');\nconst lint = require('@commitlint/lint');\nconst read = require('@commitlint/read');\nconst chalk = require('chalk');\nconst meow = require('meow');\nconst merge = require('lodash.merge');\nconst pick = require('lodash.pick');\nconst stdin = require('get-stdin');\n\nconst pkg = require('../package');\nconst help = require('./help');\n\nconst flags = {\n\tcolor: {\n\t\talias: 'c',\n\t\tdefault: true,\n\t\tdescription: 'toggle colored output',\n\t\ttype: 'boolean'\n\t},\n\tconfig: {\n\t\talias: 'g',\n\t\tdefault: null,\n\t\tdescription: 'path to the config file',\n\t\ttype: 'string'\n\t},\n\tcwd: {\n\t\talias: 'd',\n\t\tdefault: process.cwd(),\n\t\tdescription: 'directory to execute in',\n\t\ttype: 'string'\n\t},\n\tedit: {\n\t\talias: 'e',\n\t\tdefault: false,\n\t\tdescription:\n\t\t\t'read last commit message from the specified file or fallbacks to ./.git/COMMIT_EDITMSG',\n\t\ttype: 'string'\n\t},\n\tenv: {\n\t\talias: 'E',\n\t\tdefault: null,\n\t\tdescription:\n\t\t\t'check message in the file at path given by environment variable value',\n\t\ttype: 'string'\n\t},\n\textends: {\n\t\talias: 'x',\n\t\tdescription: 'array of shareable configurations to extend',\n\t\ttype: 'string'\n\t},\n\thelp: {\n\t\talias: 'h',\n\t\ttype: 'boolean',\n\t\tdescription: 'display this help message'\n\t},\n\tfrom: {\n\t\talias: 'f',\n\t\tdefault: null,\n\t\tdescription: 'lower end of the commit range to lint; applies if edit=false',\n\t\ttype: 'string'\n\t},\n\t'parser-preset': {\n\t\talias: 'p',\n\t\tdescription: 'configuration preset to use for conventional-commits-parser',\n\t\ttype: 'string'\n\t},\n\tquiet: {\n\t\talias: 'q',\n\t\tdefault: false,\n\t\tdescription: 'toggle console output',\n\t\ttype: 'boolean'\n\t},\n\tto: {\n\t\talias: 't',\n\t\tdefault: null,\n\t\tdescription: 'upper end of the commit range to lint; applies if edit=false',\n\t\ttype: 'string'\n\t},\n\tversion: {\n\t\talias: 'v',\n\t\ttype: 'boolean',\n\t\tdescription: 'display version information'\n\t}\n};\n\nconst cli = meow({\n\tdescription: `${pkg.name}@${pkg.version} - ${pkg.description}`,\n\tflags,\n\thelp: `[input] reads from stdin if --edit, --env, --from and --to are omitted\\n${help(\n\t\tflags\n\t)}`,\n\tunknown(arg) {\n\t\tthrow new Error(`unknown flags: ${arg}`);\n\t}\n});\n\nmain(cli).catch(err =>\n\tsetTimeout(() => {\n\t\tif (err.type === pkg.name) {\n\t\t\tprocess.exit(1);\n\t\t}\n\t\tthrow err;\n\t})\n);\n\nasync function main(options) {\n\tconst raw = options.input;\n\tconst flags = normalizeFlags(options.flags);\n\tconst fromStdin = checkFromStdin(raw, flags);\n\n\tconst range = pick(flags, 'edit', 'from', 'to');\n\tconst fmt = new chalk.constructor({enabled: flags.color});\n\n\tconst input = await (fromStdin ? stdin() : read(range, {cwd: flags.cwd}));\n\n\tconst messages = (Array.isArray(input) ? input : [input])\n\t\t.filter(message => typeof message === 'string')\n\t\t.filter(Boolean);\n\n\tif (messages.length === 0 && !checkFromRepository(flags)) {\n\t\tconst err = new Error(\n\t\t\t'[input] is required: supply via stdin, or --env or --edit or --from and --to'\n\t\t);\n\t\terr.type = pkg.name;\n\t\tconsole.log(`${cli.help}\\n`);\n\t\tconsole.log(err.message);\n\t\tthrow err;\n\t}\n\n\tconst loadOpts = {cwd: flags.cwd, file: flags.config};\n\tconst loaded = await load(getSeed(flags), loadOpts);\n\tconst parserOpts = selectParserOpts(loaded.parserPreset);\n\tconst opts = parserOpts ? {parserOpts} : {parserOpts: {}};\n\n\t// Strip comments if reading from `.git/COMMIT_EDIT_MSG`\n\tif (range.edit) {\n\t\topts.parserOpts.commentChar = '#';\n\t}\n\n\treturn Promise.all(\n\t\tmessages.map(async message => {\n\t\t\tconst report = await lint(message, loaded.rules, opts);\n\t\t\tconst formatted = format(report, {color: flags.color});\n\t\t\tconst input =\n\t\t\t\treport.errors.length > 0\n\t\t\t\t\t? `\\n${report.input}\\n`\n\t\t\t\t\t: message.split('\\n')[0];\n\n\t\t\tif (!flags.quiet) {\n\t\t\t\tconsole.log(`${fmt.grey('⧗')}   input: ${fmt.bold(input)}`);\n\t\t\t\tconsole.log(formatted.join('\\n'));\n\t\t\t}\n\n\t\t\tif (report.errors.length > 0) {\n\t\t\t\tconst error = new Error(formatted[formatted.length - 1]);\n\t\t\t\terror.type = pkg.name;\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tconsole.log('');\n\t\t})\n\t);\n}\n\nfunction checkFromStdin(input, flags) {\n\treturn input.length === 0 && !checkFromRepository(flags);\n}\n\nfunction checkFromRepository(flags) {\n\treturn checkFromHistory(flags) || checkFromEdit(flags);\n}\n\nfunction checkFromEdit(flags) {\n\treturn Boolean(flags.edit) || flags.env;\n}\n\nfunction checkFromHistory(flags) {\n\treturn typeof flags.from === 'string' || typeof flags.to === 'string';\n}\n\nfunction normalizeFlags(flags) {\n\tconst edit = getEditValue(flags);\n\treturn merge({}, flags, {edit, e: edit});\n}\n\nfunction getEditValue(flags) {\n\tif (flags.env) {\n\t\tif (!(flags.env in process.env)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Recieved '${\n\t\t\t\t\tflags.env\n\t\t\t\t}' as value for -E | --env, but environment variable '${\n\t\t\t\t\tflags.env\n\t\t\t\t}' is not available globally`\n\t\t\t);\n\t\t}\n\t\treturn process.env[flags.env];\n\t}\n\tconst edit = flags.edit;\n\t// If the edit flag is set but empty (i.e '-e') we default\n\t// to .git/COMMIT_EDITMSG\n\tif (edit === '') {\n\t\treturn true;\n\t}\n\tif (typeof edit === 'boolean') {\n\t\treturn edit;\n\t}\n\t// The recommended method to specify -e with husky was `commitlint -e $GIT_PARAMS`\n\t// This does not work properly with win32 systems, where env variable declarations\n\t// use a different syntax\n\t// See https://github.com/marionebl/commitlint/issues/103 for details\n\t// This has been superceded by the `-E GIT_PARAMS` / `-E HUSKY_GIT_PARAMS`\n\tif (edit === '$GIT_PARAMS' || edit === '%GIT_PARAMS%') {\n\t\tconsole.warn(`Using environment variable syntax (${edit}) in -e |\\\n--edit is deprecated. Use '{-E|--env} GIT_PARAMS instead'`);\n\t\tif (!('GIT_PARAMS' in process.env)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Received ${edit} as value for -e | --edit, but GIT_PARAMS is not available globally.`\n\t\t\t);\n\t\t}\n\t\treturn process.env.GIT_PARAMS;\n\t}\n\treturn edit;\n}\n\nfunction getSeed(seed) {\n\tconst e = Array.isArray(seed.extends) ? seed.extends : [seed.extends];\n\tconst n = e.filter(i => typeof i === 'string');\n\treturn n.length > 0\n\t\t? {extends: n, parserPreset: seed.parserPreset}\n\t\t: {parserPreset: seed.parserPreset};\n}\n\nfunction selectParserOpts(parserPreset) {\n\tif (typeof parserPreset !== 'object') {\n\t\treturn undefined;\n\t}\n\n\tif (typeof parserPreset.parserOpts !== 'object') {\n\t\treturn undefined;\n\t}\n\n\treturn parserPreset.parserOpts;\n}\n\n// Catch unhandled rejections globally\nprocess.on('unhandledRejection', (reason, promise) => {\n\tconsole.log('Unhandled Rejection at: Promise ', promise, ' reason: ', reason);\n\tthrow reason;\n});\n"]}
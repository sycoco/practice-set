'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeAuth = require('../type-auth');

var topics = {};

/**
 * 事件总线。用于解决各模块间无法通过 $scope.$emit $scope.$on 等方式实现通信的问题(例如兄弟模块间通信)
 */
/**
 * @author Kuitos
 * @homepage https://github.com/kuitos/
 * @since 2016-05-04
 */
exports.default = {

	/**
  * 订阅消息
  * @param topic 订阅消息名
  * @param listener 消息发布时触发的回调
  * @returns {Function} 取消订阅的反注册函数
  */
	on: function on(topic, listener) {

		var topicListeners = topics[topic] = topics[topic] || [];
		topicListeners.push(listener);

		return this.off.bind(this, topic, listener);
	},

	once: function once(topic, listener) {
		var _this = this;

		var onceListener = function onceListener() {
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}

			_this.off(topic, onceListener);
			listener.apply(null, args);
		};

		return this.on(topic, onceListener);
	},

	/**
  * 移除注册信息
  * @param topic 消息名
  * @param listener  移除的注册函数,不传则移除全部注册
  */
	off: function off(topic, listener) {

		var topicListeners = topics[topic];

		if (listener) {

			var listenerIndex = topicListeners.indexOf(listener);
			if (~listenerIndex) {
				topicListeners[listenerIndex] = null;
			}
		} else {
			// 清空
			topicListeners.length = 0;
		}

		return this;
	},

	/**
  * 发布消息，支持链式调用
  */
	dispatch: function dispatch(topic) {

		var i = 0;
		var listeners = topics[topic] || [];

		for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
			args[_key2 - 1] = arguments[_key2];
		}

		while (i < listeners.length) {

			var listener = listeners[i];

			if (listener === null) {
				listeners.splice(i, 1);
			} else {
				if ((0, _typeAuth.isFunction)(listener)) {
					listener.apply(null, args);
				} else {
					console.error('事件总线分发 %s 消息失败，注册的listener不是函数类型！', topic);
				}
				i++;
			}
		}

		return this;
	},

	getListeners: function getListeners(topic) {
		return topics[topic] || [];
	}
};